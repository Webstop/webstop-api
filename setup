#!/usr/bin/env bash

# Run this file before running the app for the first time.


echo
echo
echo "=== webstop-api gem setup: configuring =================================="
echo


create_config_files () {
  echo "  creating .env from .env_sample"
  if [[ -f .env ]]; then
    echo "    backing up existing .env to .env_BAK"
    cp -f .env .env_BAK
  fi
  cp -f .env_sample .env
  echo
}

if [[ -f .env ]]; then
  read -p "  Do you want to replace your existing .env file? (y/n): " replace_config_files
  if [[ "$replace_config_files" == "y" ]] || [[ "$replace_config_files" == "Y" ]]; then
    create_config_files
  fi
else
  if [[ ! -f .env ]]; then
    create_config_files
  fi
fi


# For each external network defined in docker-compose.yml, create it if it
# doesn't already exist.
create_missing_external_networks () {
  networks=$(grep -B 1 'external:\s*true' docker-compose.yml | egrep -v 'external:\s*true' | egrep -o '(\w|-)+')
  while IFS= read -r network; do # for each linefeed delimited line in $networks string
    if [[ $(docker network ls --filter "name=$network" -q | wc -l) -eq 0 ]]; then
      echo
      echo "  Creating missing external docker network: $network"
      docker network create $network > /dev/null 2>&1 # ignore network id output
    fi
  done <<< "$networks"
}

create_missing_external_networks


echo
echo "--- Building docker container -------------------------------------------"
echo
read -p "    (Re)build gem image? (y/n): " rebuild_images
if [[ "$rebuild_images" == "y" ]] || [[ "$rebuild_images" == "Y" ]]; then
  docker compose build --no-cache
fi


echo
echo "--- Installing Gems -----------------------------------------------------"
echo

docker compose run --rm gem bundle install


echo
echo "=== Setup Finished! ====================================================="
echo
echo "If you don't see any errors above, try executing the ./console command to"
echo "start interacting with the gem code."
echo
echo
